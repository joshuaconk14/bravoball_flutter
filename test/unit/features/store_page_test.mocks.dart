// Mocks generated by Mockito 5.4.6 from annotations
// in bravoball_flutter/test/unit/features/store_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:bravoball_flutter/models/drill_group_model.dart' as _i3;
import 'package:bravoball_flutter/models/drill_model.dart' as _i4;
import 'package:bravoball_flutter/models/editable_drill_model.dart' as _i9;
import 'package:bravoball_flutter/models/filter_models.dart' as _i2;
import 'package:bravoball_flutter/services/app_state_service.dart' as _i8;
import 'package:bravoball_flutter/services/store_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeUserPreferences_0 extends _i1.SmartFake
    implements _i2.UserPreferences {
  _FakeUserPreferences_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDrillGroup_1 extends _i1.SmartFake implements _i3.DrillGroup {
  _FakeDrillGroup_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDrillModel_2 extends _i1.SmartFake implements _i4.DrillModel {
  _FakeDrillModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreService extends _i1.Mock implements _i5.StoreService {
  MockStoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get treats =>
      (super.noSuchMethod(Invocation.getter(#treats), returnValue: 0) as int);

  @override
  int get streakFreezes =>
      (super.noSuchMethod(Invocation.getter(#streakFreezes), returnValue: 0)
          as int);

  @override
  int get streakRevivers =>
      (super.noSuchMethod(Invocation.getter(#streakRevivers), returnValue: 0)
          as int);

  @override
  List<DateTime> get usedFreezes =>
      (super.noSuchMethod(
            Invocation.getter(#usedFreezes),
            returnValue: <DateTime>[],
          )
          as List<DateTime>);

  @override
  List<DateTime> get usedRevivers =>
      (super.noSuchMethod(
            Invocation.getter(#usedRevivers),
            returnValue: <DateTime>[],
          )
          as List<DateTime>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> purchaseStreakFreeze() =>
      (super.noSuchMethod(
            Invocation.method(#purchaseStreakFreeze, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> purchaseStreakReviver() =>
      (super.noSuchMethod(
            Invocation.method(#purchaseStreakReviver, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, dynamic>?> useStreakReviver() =>
      (super.noSuchMethod(
            Invocation.method(#useStreakReviver, []),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  _i6.Future<Map<String, dynamic>?> useStreakFreeze() =>
      (super.noSuchMethod(
            Invocation.method(#useStreakFreeze, []),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> addTreatsReward(int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#addTreatsReward, [amount]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> addDebugTreats(int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#addDebugTreats, [amount]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppStateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateService extends _i1.Mock implements _i8.AppStateService {
  MockAppStateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserPreferences get preferences =>
      (super.noSuchMethod(
            Invocation.getter(#preferences),
            returnValue: _FakeUserPreferences_0(
              this,
              Invocation.getter(#preferences),
            ),
          )
          as _i2.UserPreferences);

  @override
  bool get isLoadingPreferences =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingPreferences),
            returnValue: false,
          )
          as bool);

  @override
  List<_i9.EditableDrillModel> get editableSessionDrills =>
      (super.noSuchMethod(
            Invocation.getter(#editableSessionDrills),
            returnValue: <_i9.EditableDrillModel>[],
          )
          as List<_i9.EditableDrillModel>);

  @override
  List<_i4.DrillModel> get sessionDrills =>
      (super.noSuchMethod(
            Invocation.getter(#sessionDrills),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  _i8.SessionState get sessionState =>
      (super.noSuchMethod(
            Invocation.getter(#sessionState),
            returnValue: _i8.SessionState.idle,
          )
          as _i8.SessionState);

  @override
  bool get sessionInProgress =>
      (super.noSuchMethod(
            Invocation.getter(#sessionInProgress),
            returnValue: false,
          )
          as bool);

  @override
  bool get currentSessionCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#currentSessionCompleted),
            returnValue: false,
          )
          as bool);

  @override
  bool get canCompleteSession =>
      (super.noSuchMethod(
            Invocation.getter(#canCompleteSession),
            returnValue: false,
          )
          as bool);

  @override
  bool get isCompletingSession =>
      (super.noSuchMethod(
            Invocation.getter(#isCompletingSession),
            returnValue: false,
          )
          as bool);

  @override
  bool get isGuestMode =>
      (super.noSuchMethod(Invocation.getter(#isGuestMode), returnValue: false)
          as bool);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  List<_i3.DrillGroup> get savedDrillGroups =>
      (super.noSuchMethod(
            Invocation.getter(#savedDrillGroups),
            returnValue: <_i3.DrillGroup>[],
          )
          as List<_i3.DrillGroup>);

  @override
  Set<_i4.DrillModel> get likedDrills =>
      (super.noSuchMethod(
            Invocation.getter(#likedDrills),
            returnValue: <_i4.DrillModel>{},
          )
          as Set<_i4.DrillModel>);

  @override
  List<_i4.DrillModel> get customDrills =>
      (super.noSuchMethod(
            Invocation.getter(#customDrills),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isLoadingMore =>
      (super.noSuchMethod(Invocation.getter(#isLoadingMore), returnValue: false)
          as bool);

  @override
  List<_i4.DrillModel> get searchResults =>
      (super.noSuchMethod(
            Invocation.getter(#searchResults),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  List<_i8.CompletedSession> get completedSessions =>
      (super.noSuchMethod(
            Invocation.getter(#completedSessions),
            returnValue: <_i8.CompletedSession>[],
          )
          as List<_i8.CompletedSession>);

  @override
  int get currentStreak =>
      (super.noSuchMethod(Invocation.getter(#currentStreak), returnValue: 0)
          as int);

  @override
  int get previousStreak =>
      (super.noSuchMethod(Invocation.getter(#previousStreak), returnValue: 0)
          as int);

  @override
  int get highestStreak =>
      (super.noSuchMethod(Invocation.getter(#highestStreak), returnValue: 0)
          as int);

  @override
  int get countOfFullyCompletedSessions =>
      (super.noSuchMethod(
            Invocation.getter(#countOfFullyCompletedSessions),
            returnValue: 0,
          )
          as int);

  @override
  bool get hasJustLostStreak =>
      (super.noSuchMethod(
            Invocation.getter(#hasJustLostStreak),
            returnValue: false,
          )
          as bool);

  @override
  List<DateTime> get usedFreezes =>
      (super.noSuchMethod(
            Invocation.getter(#usedFreezes),
            returnValue: <DateTime>[],
          )
          as List<DateTime>);

  @override
  List<DateTime> get usedRevivers =>
      (super.noSuchMethod(
            Invocation.getter(#usedRevivers),
            returnValue: <DateTime>[],
          )
          as List<DateTime>);

  @override
  String get favoriteDrill =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteDrill),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#favoriteDrill),
            ),
          )
          as String);

  @override
  double get drillsPerSession =>
      (super.noSuchMethod(
            Invocation.getter(#drillsPerSession),
            returnValue: 0.0,
          )
          as double);

  @override
  double get minutesPerSession =>
      (super.noSuchMethod(
            Invocation.getter(#minutesPerSession),
            returnValue: 0.0,
          )
          as double);

  @override
  int get totalTimeAllSessions =>
      (super.noSuchMethod(
            Invocation.getter(#totalTimeAllSessions),
            returnValue: 0,
          )
          as int);

  @override
  int get dribblingDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#dribblingDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get firstTouchDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#firstTouchDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get passingDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#passingDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get shootingDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#shootingDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get defendingDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#defendingDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get goalkeepingDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#goalkeepingDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get fitnessDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#fitnessDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  String get mostImprovedSkill =>
      (super.noSuchMethod(
            Invocation.getter(#mostImprovedSkill),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#mostImprovedSkill),
            ),
          )
          as String);

  @override
  int get uniqueDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#uniqueDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get beginnerDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#beginnerDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get intermediateDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#intermediateDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get advancedDrillsCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#advancedDrillsCompleted),
            returnValue: 0,
          )
          as int);

  @override
  int get mentalTrainingSessions =>
      (super.noSuchMethod(
            Invocation.getter(#mentalTrainingSessions),
            returnValue: 0,
          )
          as int);

  @override
  int get totalMentalTrainingMinutes =>
      (super.noSuchMethod(
            Invocation.getter(#totalMentalTrainingMinutes),
            returnValue: 0,
          )
          as int);

  @override
  bool get isInitialLoad =>
      (super.noSuchMethod(Invocation.getter(#isInitialLoad), returnValue: false)
          as bool);

  @override
  bool get isLoggingOut =>
      (super.noSuchMethod(Invocation.getter(#isLoggingOut), returnValue: false)
          as bool);

  @override
  bool get autoGenerateSession =>
      (super.noSuchMethod(
            Invocation.getter(#autoGenerateSession),
            returnValue: false,
          )
          as bool);

  @override
  List<_i4.DrillModel> get availableDrills =>
      (super.noSuchMethod(
            Invocation.getter(#availableDrills),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  bool get hasSessionsCompletedToday =>
      (super.noSuchMethod(
            Invocation.getter(#hasSessionsCompletedToday),
            returnValue: false,
          )
          as bool);

  @override
  int get sessionsCompletedToday =>
      (super.noSuchMethod(
            Invocation.getter(#sessionsCompletedToday),
            returnValue: 0,
          )
          as int);

  @override
  bool get hasSessionProgress =>
      (super.noSuchMethod(
            Invocation.getter(#hasSessionProgress),
            returnValue: false,
          )
          as bool);

  @override
  double get sessionCompletionPercentage =>
      (super.noSuchMethod(
            Invocation.getter(#sessionCompletionPercentage),
            returnValue: 0.0,
          )
          as double);

  @override
  bool get isSessionComplete =>
      (super.noSuchMethod(
            Invocation.getter(#isSessionComplete),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasSessionDrills =>
      (super.noSuchMethod(
            Invocation.getter(#hasSessionDrills),
            returnValue: false,
          )
          as bool);

  @override
  int get sessionDrillCount =>
      (super.noSuchMethod(Invocation.getter(#sessionDrillCount), returnValue: 0)
          as int);

  @override
  int get currentSearchPage =>
      (super.noSuchMethod(Invocation.getter(#currentSearchPage), returnValue: 0)
          as int);

  @override
  int get totalSearchPages =>
      (super.noSuchMethod(Invocation.getter(#totalSearchPages), returnValue: 0)
          as int);

  @override
  int get totalSearchResults =>
      (super.noSuchMethod(
            Invocation.getter(#totalSearchResults),
            returnValue: 0,
          )
          as int);

  @override
  bool get hasMoreSearchResults =>
      (super.noSuchMethod(
            Invocation.getter(#hasMoreSearchResults),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasSearchResults =>
      (super.noSuchMethod(
            Invocation.getter(#hasSearchResults),
            returnValue: false,
          )
          as bool);

  @override
  _i3.DrillGroup get likedDrillsGroup =>
      (super.noSuchMethod(
            Invocation.getter(#likedDrillsGroup),
            returnValue: _FakeDrillGroup_1(
              this,
              Invocation.getter(#likedDrillsGroup),
            ),
          )
          as _i3.DrillGroup);

  @override
  List<_i4.DrillModel> get filteredDrills =>
      (super.noSuchMethod(
            Invocation.getter(#filteredDrills),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  List<_i4.DrillModel> get drillsNotInSession =>
      (super.noSuchMethod(
            Invocation.getter(#drillsNotInSession),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void markStreakLossDialogShown() => super.noSuchMethod(
    Invocation.method(#markStreakLossDialogShown, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateStreakValues({
    required int? currentStreak,
    required int? previousStreak,
    int? highestStreak,
  }) => super.noSuchMethod(
    Invocation.method(#updateStreakValues, [], {
      #currentStreak: currentStreak,
      #previousStreak: previousStreak,
      #highestStreak: highestStreak,
    }),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadTestSession() =>
      (super.noSuchMethod(
            Invocation.method(#loadTestSession, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadBackendData() =>
      (super.noSuchMethod(
            Invocation.method(#loadBackendData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshBackendData() =>
      (super.noSuchMethod(
            Invocation.method(#refreshBackendData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshProgressHistoryFromBackend() =>
      (super.noSuchMethod(
            Invocation.method(#refreshProgressHistoryFromBackend, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshCustomDrillsFromBackend() =>
      (super.noSuchMethod(
            Invocation.method(#refreshCustomDrillsFromBackend, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshDrillGroupsFromBackend() =>
      (super.noSuchMethod(
            Invocation.method(#refreshDrillGroupsFromBackend, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> deleteCustomDrill(String? drillId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCustomDrill, [drillId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i4.DrillModel? getCustomDrillById(String? drillId) =>
      (super.noSuchMethod(Invocation.method(#getCustomDrillById, [drillId]))
          as _i4.DrillModel?);

  @override
  _i4.DrillModel getUpdatedDrill(_i4.DrillModel? originalDrill) =>
      (super.noSuchMethod(
            Invocation.method(#getUpdatedDrill, [originalDrill]),
            returnValue: _FakeDrillModel_2(
              this,
              Invocation.method(#getUpdatedDrill, [originalDrill]),
            ),
          )
          as _i4.DrillModel);

  @override
  _i6.Future<void> addCompletedSession(_i8.CompletedSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#addCompletedSession, [session]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> completeSession() =>
      (super.noSuchMethod(
            Invocation.method(#completeSession, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void startSession() => super.noSuchMethod(
    Invocation.method(#startSession, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> canStartNewSession() =>
      (super.noSuchMethod(
            Invocation.method(#canStartNewSession, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> searchDrillsWithPagination({
    String? query,
    String? skill,
    String? difficulty,
    String? trainingStyle,
    List<String>? equipment,
    int? maxDuration,
    bool? loadMore = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchDrillsWithPagination, [], {
              #query: query,
              #skill: skill,
              #difficulty: difficulty,
              #trainingStyle: trainingStyle,
              #equipment: equipment,
              #maxDuration: maxDuration,
              #loadMore: loadMore,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadMoreSearchResults() =>
      (super.noSuchMethod(
            Invocation.method(#loadMoreSearchResults, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshSearch() =>
      (super.noSuchMethod(
            Invocation.method(#refreshSearch, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.DrillModel>> getDrillsBySkillAsync(String? skill) =>
      (super.noSuchMethod(
            Invocation.method(#getDrillsBySkillAsync, [skill]),
            returnValue: _i6.Future<List<_i4.DrillModel>>.value(
              <_i4.DrillModel>[],
            ),
          )
          as _i6.Future<List<_i4.DrillModel>>);

  @override
  _i6.Future<List<_i4.DrillModel>> getPopularDrillsAsync() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularDrillsAsync, []),
            returnValue: _i6.Future<List<_i4.DrillModel>>.value(
              <_i4.DrillModel>[],
            ),
          )
          as _i6.Future<List<_i4.DrillModel>>);

  @override
  void updateTimeFilter(String? time) => super.noSuchMethod(
    Invocation.method(#updateTimeFilter, [time]),
    returnValueForMissingStub: null,
  );

  @override
  void updateEquipmentFilter(Set<String>? equipment) => super.noSuchMethod(
    Invocation.method(#updateEquipmentFilter, [equipment]),
    returnValueForMissingStub: null,
  );

  @override
  void updateTrainingStyleFilter(String? style) => super.noSuchMethod(
    Invocation.method(#updateTrainingStyleFilter, [style]),
    returnValueForMissingStub: null,
  );

  @override
  void updateLocationFilter(String? location) => super.noSuchMethod(
    Invocation.method(#updateLocationFilter, [location]),
    returnValueForMissingStub: null,
  );

  @override
  void updateDifficultyFilter(String? difficulty) => super.noSuchMethod(
    Invocation.method(#updateDifficultyFilter, [difficulty]),
    returnValueForMissingStub: null,
  );

  @override
  void updateSkillsFilter(Set<String>? skills) => super.noSuchMethod(
    Invocation.method(#updateSkillsFilter, [skills]),
    returnValueForMissingStub: null,
  );

  @override
  void updateUserPreferences(_i2.UserPreferences? preferences) =>
      super.noSuchMethod(
        Invocation.method(#updateUserPreferences, [preferences]),
        returnValueForMissingStub: null,
      );

  @override
  void updateOrderedSessionDrillsThroughPreferences(
    List<_i9.EditableDrillModel>? drills,
  ) => super.noSuchMethod(
    Invocation.method(#updateOrderedSessionDrillsThroughPreferences, [drills]),
    returnValueForMissingStub: null,
  );

  @override
  bool addDrillToSession(_i4.DrillModel? drill) =>
      (super.noSuchMethod(
            Invocation.method(#addDrillToSession, [drill]),
            returnValue: false,
          )
          as bool);

  @override
  void removeDrillFromSession(_i4.DrillModel? drill) => super.noSuchMethod(
    Invocation.method(#removeDrillFromSession, [drill]),
    returnValueForMissingStub: null,
  );

  @override
  void reorderSessionDrills(int? oldIndex, int? newIndex) => super.noSuchMethod(
    Invocation.method(#reorderSessionDrills, [oldIndex, newIndex]),
    returnValueForMissingStub: null,
  );

  @override
  void clearSession() => super.noSuchMethod(
    Invocation.method(#clearSession, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateDrillInSession(
    String? drillId, {
    int? sets,
    int? reps,
    int? duration,
  }) => super.noSuchMethod(
    Invocation.method(
      #updateDrillInSession,
      [drillId],
      {#sets: sets, #reps: reps, #duration: duration},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void updateDrillProgress(
    String? drillId, {
    int? setsDone,
    bool? isCompleted,
  }) => super.noSuchMethod(
    Invocation.method(
      #updateDrillProgress,
      [drillId],
      {#setsDone: setsDone, #isCompleted: isCompleted},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> createDrillGroup(String? name, String? description) =>
      (super.noSuchMethod(
            Invocation.method(#createDrillGroup, [name, description]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void deleteDrillGroup(String? groupId) => super.noSuchMethod(
    Invocation.method(#deleteDrillGroup, [groupId]),
    returnValueForMissingStub: null,
  );

  @override
  void editDrillGroup(
    String? groupId,
    String? newName,
    String? newDescription,
  ) => super.noSuchMethod(
    Invocation.method(#editDrillGroup, [groupId, newName, newDescription]),
    returnValueForMissingStub: null,
  );

  @override
  void addDrillToGroup(String? groupId, _i4.DrillModel? drill) =>
      super.noSuchMethod(
        Invocation.method(#addDrillToGroup, [groupId, drill]),
        returnValueForMissingStub: null,
      );

  @override
  void addDrillsToGroup(String? groupId, List<_i4.DrillModel>? drills) =>
      super.noSuchMethod(
        Invocation.method(#addDrillsToGroup, [groupId, drills]),
        returnValueForMissingStub: null,
      );

  @override
  void removeDrillFromGroup(String? groupId, _i4.DrillModel? drill) =>
      super.noSuchMethod(
        Invocation.method(#removeDrillFromGroup, [groupId, drill]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DrillGroup? getDrillGroup(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#getDrillGroup, [groupId]))
          as _i3.DrillGroup?);

  @override
  void toggleLikedDrill(_i4.DrillModel? drill) => super.noSuchMethod(
    Invocation.method(#toggleLikedDrill, [drill]),
    returnValueForMissingStub: null,
  );

  @override
  bool isDrillLiked(_i4.DrillModel? drill) =>
      (super.noSuchMethod(
            Invocation.method(#isDrillLiked, [drill]),
            returnValue: false,
          )
          as bool);

  @override
  bool isDrillSavedInAnyCollection(_i4.DrillModel? drill) =>
      (super.noSuchMethod(
            Invocation.method(#isDrillSavedInAnyCollection, [drill]),
            returnValue: false,
          )
          as bool);

  @override
  bool isDrillInSession(_i4.DrillModel? drill) =>
      (super.noSuchMethod(
            Invocation.method(#isDrillInSession, [drill]),
            returnValue: false,
          )
          as bool);

  @override
  void toggleAutoGenerate(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleAutoGenerate, [value]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i4.DrillModel> searchDrills(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchDrills, [query]),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  List<_i4.DrillModel> filterDrillsBySkill(String? skill) =>
      (super.noSuchMethod(
            Invocation.method(#filterDrillsBySkill, [skill]),
            returnValue: <_i4.DrillModel>[],
          )
          as List<_i4.DrillModel>);

  @override
  void resetDrillProgressForNewSession() => super.noSuchMethod(
    Invocation.method(#resetDrillProgressForNewSession, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetStreak() => super.noSuchMethod(
    Invocation.method(#resetStreak, []),
    returnValueForMissingStub: null,
  );

  @override
  void incrementStreak() => super.noSuchMethod(
    Invocation.method(#incrementStreak, []),
    returnValueForMissingStub: null,
  );

  @override
  void addCompletedSessions(int? count) => super.noSuchMethod(
    Invocation.method(#addCompletedSessions, [count]),
    returnValueForMissingStub: null,
  );

  @override
  void clearUserData() => super.noSuchMethod(
    Invocation.method(#clearUserData, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void setInitialLoadState(bool? isInitialLoad) => super.noSuchMethod(
    Invocation.method(#setInitialLoadState, [isInitialLoad]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> handleAuthenticationTransition() =>
      (super.noSuchMethod(
            Invocation.method(#handleAuthenticationTransition, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
